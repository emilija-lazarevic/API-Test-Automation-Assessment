{
	"info": {
		"_postman_id": "d9704634-6331-4fbe-af3a-b1b5c353e0eb",
		"name": "API Test Automation Assessment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26264851"
	},
	"item": [
		{
			"name": "User Tests",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Register - Successful Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 upon successful registration\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('A user ID has been assigned', function () {\r",
											"pm.response.json().hasOwnProperty(\"id\")\r",
											"});\r",
											"\r",
											"pm.test('Response has returned a token', function () {\r",
											"pm.response.json().hasOwnProperty(\"token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{valid-user-email}}\",\r\n    \"password\": \"DreadWolf$123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/register",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - Unsuccessful Registration For Bad Email Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 upon unsuccessful registration\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('An error has returned when trying to register an email in a bad format', function () {\r",
											"pm.response.json().hasOwnProperty(\"error\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"badFormat.reques.in\",\r\n    \"password\": \"DreadWolf$123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/register",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - Unsuccessful Without An Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for a registration attempt without an email\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned a 'Missing email or username' error\", function () {\r",
											"    pm.expect(pm.response.json().error).to.include(\"Missing email or username\"); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"\",\r\n    \"password\" : \"DreadWolf$123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/register",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - Unsuccessful Without A Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for a registration attempt without a password\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned a 'Missing password' error\", function () {\r",
											"    pm.expect(pm.response.json().error).to.include(\"Missing password\"); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{valid-user-email}}\",\r\n    \"password\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/register",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - Unsuccessful With A Wrong HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unable to register through a wrong HTTP method\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{valid-user-email}}\",\r\n    \"password\": \"DreadWolf$123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/register",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login - Successful Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 upon successful login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response has returned a token', function () {\r",
											"pm.response.json().hasOwnProperty(\"token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{valid-user-email}}\",\r\n    \"password\": \"Cerberus1!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/login",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Unsuccessful With A Non-Existing Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for login attempt with a wrong username\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned a 'User not found' error\", function () {\r",
											"    pm.expect(pm.response.json().error).to.include(\"user not found\"); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"commander.shepard@gmail.com\",\r\n    \"password\" : \"cerberus123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/login",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Unsuccessful Without An Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for login attempt without an email\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned a 'Missing email or username' error\", function () {\r",
											"    pm.expect(pm.response.json().error).to.include(\"Missing email or username\"); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"\",\r\n    \"password\" : \"cerberus123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/login",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Unsuccessful Without A Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for login attempt without a password\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned a 'Missing password' error\", function () {\r",
											"    pm.expect(pm.response.json().error).to.include(\"Missing password\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{valid-user-email}}\",\r\n    \"password\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/login",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Unsuccessful With A Wrong HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unable to log in through a wrong http method\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{valid-user-email}}\",\r\n    \"password\": \"Cerberus1!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/login",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Logout - Successful Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 upon successful logout\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base-url}}/logout",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin Tests",
			"item": [
				{
					"name": "Update User",
					"item": [
						{
							"name": "Update User - Successful Update Through The PATCH Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 for successful update through the PATCH method\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned an updated name\", function () {\r",
											"    pm.expect(pm.response.json().name).to.equal(\"Liara\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned an updated job\", function () {\r",
											"    pm.expect(pm.response.json().job).to.equal(\"Prothean Researcher\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned an update timestamp with a proper update date\", function () {\r",
											"    pm.expect(pm.response.json().updatedAt).to.include(pm.variables.get(\"currentDate\")); \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Liara\",\r\n    \"job\": \"Prothean Researcher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/users/33",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"users",
										"33"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User - Successful Update Through The PUT Method",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 for successful update through the PUT method\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned an updated name\", function () {\r",
											"    pm.expect(pm.response.json().name).to.equal(\"Alistair\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned an updated job\", function () {\r",
											"    pm.expect(pm.response.json().job).to.equal(\"Templar\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has returned an update timestamp with a proper update date\", function () {\r",
											"    pm.expect(pm.response.json().updatedAt).to.include(pm.variables.get(\"currentDate\")); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Alistair\",\r\n    \"job\": \"Templar\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/users/6",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"users",
										"6"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "Delete User - Successful Deletion Of A User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204 upon successful user deletion\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base-url}}/users/4444",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"users",
										"4444"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require(\"moment\")",
					"pm.globals.set(\"currentDate\", moment().format(\"YYYY-MM-DD\"));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}